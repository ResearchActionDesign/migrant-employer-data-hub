version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1

jobs:
  install_dependencies:
    docker:
      - image: cimg/python:3.9.6-node

    working_directory: ~/repo
    environment:
      PIPENV_VENV_IN_PROJECT: 1
      PRE_COMMIT_HOME: ~/repo/.cache

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v4-dependencies-{{ checksum "Pipfile.lock" }}

      - run:
          name: install dependencies
          command: |
            pipenv sync --dev

      - run:
          name: install pre-commit
          command: |
            pipenv run pre-commit install

      - save_cache:
          paths:
            - ./.venv
          key: v4-dependencies-{{ checksum "Pipfile.lock" }}

      - persist_to_workspace:
          root: .
          paths:
            - ./*

  back_end_test:
    docker:
      - image: cimg/python:3.9.6-node
    resource_class: large
    working_directory: ~/repo
    environment:
      PIPENV_VENV_IN_PROJECT: 1

    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Create job order PDFs directory
          command: mkdir app/job-order-pdfs
      - run:
          name: Run Django unit tests
          command: pipenv run pytest

  lint:
    docker:
      - image: cimg/python:3.9.6-node
    working_directory: ~/repo
    environment:
      PIPENV_VENV_IN_PROJECT: 1
      PRE_COMMIT_HOME: ~/repo/.cache

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Lint python code
          command: pipenv run pre-commit run --all-files

  deploy_ec2:
    executor: aws-cli/default
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'db:f1:58:f3:89:3a:7a:0f:2c:dd:0a:fe:4e:fc:2c:14'
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      - run: >-
          aws ec2-instance-connect send-ssh-public-key
          --instance-id $AWS_EC2_INSTANCE_ID
          --instance-os-user ec2-user
          --availability-zone $AWS_AVAILABILITY_ZONE
          --ssh-public-key "$SSH_PUBLIC_KEY"
      - run: |
          ssh -A -o StrictHostKeyChecking=no ec2-user@$AWS_EC2_INSTANCE_URL "
            ssh-add
            cd cdm-data-hub \
            && git fetch origin \
            && git checkout $CIRCLE_SHA1 \
            && /home/ec2-user/.local/bin/pipenv install"

workflows:
  test:
    jobs:
      - install_dependencies
      - lint:
          requires:
            - install_dependencies
      - back_end_test:
          requires:
            - install_dependencies
      - deploy_ec2:
          requires:
            - back_end_test
            - lint
          filters:
            branches:
              only:
                main
